import nodemailer from 'nodemailer';
import { z } from 'zod';
import type { Transporter } from 'nodemailer';

export const EmailConfigSchema = z.object({
  host: z.string(),
  port: z.number().default(587),
  secure: z.boolean().default(false),
  auth: z.object({
    user: z.string(),
    pass: z.string(),
  }),
});

export const EmailMessageSchema = z.object({
  to: z.union([z.string(), z.array(z.string())]),
  cc: z.union([z.string(), z.array(z.string())]).optional(),
  bcc: z.union([z.string(), z.array(z.string())]).optional(),
  subject: z.string(),
  text: z.string().optional(),
  html: z.string().optional(),
  attachments: z.array(z.object({
    filename: z.string(),
    content: z.union([z.string(), z.instanceof(Buffer)]),
    contentType: z.string().optional(),
    encoding: z.string().optional(),
  })).optional(),
});

export type EmailConfig = z.infer<typeof EmailConfigSchema>;
export type EmailMessage = z.infer<typeof EmailMessageSchema>;

export interface EmailSendResult {
  success: boolean;
  messageId?: string;
  error?: string;
  recipients: string[];
}

export class EmailScheduler {
  private transporter: Transporter | null = null;
  private config: EmailConfig | null = null;

  constructor(config?: EmailConfig) {
    if (config) {
      this.configure(config);
    }
  }

  configure(config: EmailConfig): void {
    const validatedConfig = EmailConfigSchema.parse(config);
    this.config = validatedConfig;
    
    this.transporter = nodemailer.createTransporter({
      host: validatedConfig.host,
      port: validatedConfig.port,
      secure: validatedConfig.secure,
      auth: {
        user: validatedConfig.auth.user,
        pass: validatedConfig.auth.pass,
      },
    });
  }

  async verifyConnection(): Promise<boolean> {
    if (!this.transporter) {
      throw new Error('Email scheduler not configured');
    }

    try {
      await this.transporter.verify();
      return true;
    } catch (error) {
      console.error('Email verification failed:', error);
      return false;
    }
  }

  async sendEmail(message: EmailMessage): Promise<EmailSendResult> {
    if (!this.transporter) {
      throw new Error('Email scheduler not configured');
    }

    const validatedMessage = EmailMessageSchema.parse(message);
    
    try {
      const info = await this.transporter.sendMail({
        from: this.config?.auth.user,
        ...validatedMessage,
      });

      return {
        success: true,
        messageId: info.messageId,
        recipients: Array.isArray(validatedMessage.to) 
          ? validatedMessage.to 
          : [validatedMessage.to],
      };
    } catch (error) {
      console.error('Email send failed:', error);
      return {
        success: false,
        error: (error as Error).message,
        recipients: Array.isArray(validatedMessage.to) 
          ? validatedMessage.to 
          : [validatedMessage.to],
      };
    }
  }

  async sendDashboardReport(
    recipient: { email: string; name?: string },
    dashboardName: string,
    reportBuffer: Buffer,
    reportFilename: string,
    reportContentType: string,
    customMessage?: string
  ): Promise<EmailSendResult> {
    const subject = `Dashboard Report: ${dashboardName}`;
    const defaultMessage = `
      <h2>Dashboard Report: ${dashboardName}</h2>
      <p>Hello ${recipient.name || 'there'},</p>
      <p>Please find the attached dashboard report generated on ${new Date().toLocaleDateString()}.</p>
      ${customMessage ? `<p>${customMessage}</p>` : ''}
      <p>Best regards,<br/>
      Elev8 Analytics Team</p>
      <hr>
      <p style="font-size: 12px; color: #666;">
        This is an automated report generated by Elev8 Analytics Platform.
      </p>
    `;

    return this.sendEmail({
      to: recipient.email,
      subject,
      html: defaultMessage,
      attachments: [
        {
          filename: reportFilename,
          content: reportBuffer,
          contentType: reportContentType,
        },
      ],
    });
  }

  async sendScheduledReport(
    recipients: Array<{ email: string; name?: string }>,
    scheduleName: string,
    dashboardName: string,
    reportBuffer: Buffer,
    reportFilename: string,
    reportContentType: string,
    templateConfig?: {
      subject?: string;
      message?: string;
      includeMetrics?: boolean;
    }
  ): Promise<EmailSendResult[]> {
    const results: EmailSendResult[] = [];

    for (const recipient of recipients) {
      const subject = templateConfig?.subject || `Scheduled Report: ${scheduleName}`;
      
      let message = templateConfig?.message || `
        <h2>Scheduled Report: ${scheduleName}</h2>
        <p>Hello ${recipient.name || 'there'},</p>
        <p>This is your scheduled report for <strong>${dashboardName}</strong>.</p>
        <p>Report generated on: ${new Date().toLocaleString()}</p>
        <p>Please find the attached report.</p>
      `;

      if (templateConfig?.includeMetrics) {
        message += `
          <div style="background: #f5f5f5; padding: 15px; margin: 15px 0; border-radius: 5px;">
            <h3>Report Details</h3>
            <ul>
              <li>File size: ${(reportBuffer.length / 1024).toFixed(2)} KB</li>
              <li>Format: ${reportContentType}</li>
              <li>Generated: ${new Date().toLocaleString()}</li>
            </ul>
          </div>
        `;
      }

      message += `
        <p>Best regards,<br/>
        Elev8 Analytics Team</p>
        <hr>
        <p style="font-size: 12px; color: #666;">
          This is an automated report from your scheduled analytics. 
          To unsubscribe or modify this schedule, please contact your administrator.
        </p>
      `;

      const result = await this.sendEmail({
        to: recipient.email,
        subject,
        html: message,
        attachments: [
          {
            filename: reportFilename,
            content: reportBuffer,
            contentType: reportContentType,
          },
        ],
      });

      results.push(result);
    }

    return results;
  }

  async sendTestEmail(recipient: string): Promise<EmailSendResult> {
    return this.sendEmail({
      to: recipient,
      subject: 'Elev8 Analytics - Email Configuration Test',
      html: `
        <h2>Email Configuration Test</h2>
        <p>This is a test email to verify your email configuration is working correctly.</p>
        <p>If you receive this email, your email scheduler is properly configured!</p>
        <p>Sent at: ${new Date().toLocaleString()}</p>
        <hr>
        <p style="font-size: 12px; color: #666;">
          Elev8 Analytics Platform - Email Scheduler Test
        </p>
      `,
    });
  }

  async sendErrorNotification(
    adminEmails: string[],
    scheduleId: string,
    scheduleName: string,
    error: string
  ): Promise<EmailSendResult[]> {
    const results: EmailSendResult[] = [];

    for (const email of adminEmails) {
      const result = await this.sendEmail({
        to: email,
        subject: `⚠️ Schedule Failed: ${scheduleName}`,
        html: `
          <h2>Schedule Execution Failed</h2>
          <p>The scheduled report <strong>${scheduleName}</strong> has failed to execute.</p>
          
          <div style="background: #fee; border: 1px solid #fcc; padding: 15px; margin: 15px 0; border-radius: 5px;">
            <h3>Error Details</h3>
            <p><strong>Schedule ID:</strong> ${scheduleId}</p>
            <p><strong>Error:</strong> ${error}</p>
            <p><strong>Time:</strong> ${new Date().toLocaleString()}</p>
          </div>
          
          <p>Please check the system logs and schedule configuration.</p>
          
          <p>Best regards,<br/>
          Elev8 Analytics System</p>
        `,
      });

      results.push(result);
    }

    return results;
  }

  static createFromEnv(): EmailScheduler {
    const config: EmailConfig = {
      host: process.env.SMTP_HOST || 'localhost',
      port: parseInt(process.env.SMTP_PORT || '587'),
      secure: process.env.SMTP_SECURE === 'true',
      auth: {
        user: process.env.SMTP_USER || '',
        pass: process.env.SMTP_PASS || '',
      },
    };

    return new EmailScheduler(config);
  }
}

// Global instance
let globalEmailScheduler: EmailScheduler | null = null;

export function getEmailScheduler(): EmailScheduler {
  if (!globalEmailScheduler) {
    globalEmailScheduler = EmailScheduler.createFromEnv();
  }
  return globalEmailScheduler;
}

export function setEmailScheduler(scheduler: EmailScheduler): void {
  globalEmailScheduler = scheduler;
}